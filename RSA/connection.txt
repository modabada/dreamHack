1
	N
		152445397714061773071213660457398933039887813014022270216241421040621332500538323453951069411162825412648127753566860787411789158524550959513628174114777241474069811348437155571547861847181392415793213989076616487886105468093122602328015993755145220708724199606465764576525378805802256998198747570759650548811
	FLAG
		48869350798763202376132611038077106745665445937159487382043732404320312025041330234150657971551982172723592156535331477817850522921625670443748438688990426062601355569410192516222459561070239144628282061999634662499190652880762699890708683366303379481869698411540585765152300062485583555307390439586189233085
2
	N
		156895585618636420216871528690059844889044856107495393431228571929538084460813932313605309813255920303755366472008914405452627794690057931555133588127969349674450024682857621363390555947518163645473806502965770625404095902482627298678618071176526759799580066013384518829907764768196726846398228660335913640173
	FLAG
		42628883114034412701863829150718294174636015883893842881377092112323393275546661537041980917999692217864318729755333302710795964933189784051935857554951747426992223154226610538625192007562779579122635833301610808283127580146861735986303894424668251878000401837419147960930990900697633703691525461946208359435
3
	N
		141523982187080287176302882994035532882870411330448445448818160794393788180610653559501232837145489342457076643017392673977898811075051667650980249833523136875766055165744141555089427959655481263278706191755905228580527777389366989916465603766338362318333991698051197597286353435448997796452031708451275557549
	FLAG
		1704330447389255687884545495809958341847478367806373165683472269992696174971727001260936759309808918459149185407352134605303193796756305872995794568575242296622146625394223706366399239042496998895440310332121021789400960924698555882914020640503600249920930514826946337287621081297386367309649192322159101313
4
	N
		163351950266857816586625492249621995061135486705741659666338264393696669749175511530953026825697225117099292033183493281171081166765106089414205995199461034488807784371967036211998112051352174576068813681677882950221625571532266253784521217114674228081619525081849357775550365059804919862862179240956184790857
	FLAG
		89191642423476782525272581181893204917859271596505032340431303350120768014153267833666257984815092961807562641299079333023427569346381896361679141106969798147907332308256426734634893780273788243022020485423389306205688998283123991522279225293796423156470735281261270163396415191902980180762500533004440741075



// 이하는 solution

n1 = 152445397714061773071213660457398933039887813014022270216241421040621332500538323453951069411162825412648127753566860787411789158524550959513628174114777241474069811348437155571547861847181392415793213989076616487886105468093122602328015993755145220708724199606465764576525378805802256998198747570759650548811
n2 = 156895585618636420216871528690059844889044856107495393431228571929538084460813932313605309813255920303755366472008914405452627794690057931555133588127969349674450024682857621363390555947518163645473806502965770625404095902482627298678618071176526759799580066013384518829907764768196726846398228660335913640173
n3 = 141523982187080287176302882994035532882870411330448445448818160794393788180610653559501232837145489342457076643017392673977898811075051667650980249833523136875766055165744141555089427959655481263278706191755905228580527777389366989916465603766338362318333991698051197597286353435448997796452031708451275557549
n4 = 163351950266857816586625492249621995061135486705741659666338264393696669749175511530953026825697225117099292033183493281171081166765106089414205995199461034488807784371967036211998112051352174576068813681677882950221625571532266253784521217114674228081619525081849357775550365059804919862862179240956184790857

c1 = 48869350798763202376132611038077106745665445937159487382043732404320312025041330234150657971551982172723592156535331477817850522921625670443748438688990426062601355569410192516222459561070239144628282061999634662499190652880762699890708683366303379481869698411540585765152300062485583555307390439586189233085
c2 = 42628883114034412701863829150718294174636015883893842881377092112323393275546661537041980917999692217864318729755333302710795964933189784051935857554951747426992223154226610538625192007562779579122635833301610808283127580146861735986303894424668251878000401837419147960930990900697633703691525461946208359435
c3 = 1704330447389255687884545495809958341847478367806373165683472269992696174971727001260936759309808918459149185407352134605303193796756305872995794568575242296622146625394223706366399239042496998895440310332121021789400960924698555882914020640503600249920930514826946337287621081297386367309649192322159101313
c4 = 89191642423476782525272581181893204917859271596505032340431303350120768014153267833666257984815092961807562641299079333023427569346381896361679141106969798147907332308256426734634893780273788243022020485423389306205688998283123991522279225293796423156470735281261270163396415191902980180762500533004440741075


// 그런데, (n2 * n3) * s1 = 1(mod n1) 계산을 해야하는데,
이때, 합동식에서는 나누기가 성립하지 않아 수식을 통해 s1을 확정할 수 없음, 유클리드 호제법을 통해 GCD 를 이용하는게 최선인듯 한데, 값이 5,000,000,000 이상이라 불가능
encrypted flag 와 decrypter 가 있기 때문에 곧바로 decrypt 를 시도하여 해결하는 방법이 있다.
하지만 내부 로직에서 직접 시도하는 경우에는 이를 막고있기 때문에, 암호문에 특정 숫자 등을 추가하여 조작을 거친 뒤, decrypt 하여 해결하자.
방법 또 틀려먹었다니까 현타온다
 